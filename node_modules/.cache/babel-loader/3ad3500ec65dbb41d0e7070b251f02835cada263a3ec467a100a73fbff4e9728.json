{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AppHeader from \"./Header.vue\";\nimport AppFooter from \"./Footer.vue\";\nimport axios from \"axios\";\nexport default {\n  name: \"HomePage\",\n  components: {\n    AppHeader,\n    AppFooter\n  },\n  data() {\n    return {\n      quizList: [],\n      currentPage: 1,\n      itemsPerPage: 10\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.quizList.length / this.itemsPerPage);\n    },\n    paginatedQuizList() {\n      const reversedQuizList = [...this.quizList].reverse();\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return reversedQuizList.slice(start, end);\n    }\n  },\n  methods: {\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    async fetchQuizList() {\n      const token = localStorage.getItem(\"jwtToken\");\n      if (!token) {\n        console.error(\"Token is missing\");\n        return;\n      }\n      try {\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        const response = await axios.get(beUrl + \"/api/v1/quizs/all\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // 각 퀴즈에 대해 `memberId`를 이용해 `memberNickname` 가져오기\n        const quizzesWithNickname = await Promise.all(response.data.map(async quiz => {\n          const createdAt = quiz.date || new Date().toISOString();\n\n          // `memberId`가 있을 경우 닉네임 조회\n          let nickname = '알 수 없음';\n          if (quiz.memberId) {\n            try {\n              const nicknameResponse = await axios.get(`${beUrl}/api/v1/members/${quiz.memberId}/nickname`, {\n                headers: {\n                  Authorization: `Bearer ${token}`\n                }\n              });\n              nickname = nicknameResponse.data || '알 수 없음';\n            } catch (error) {\n              console.error(\"닉네임 조회 실패:\", error);\n            }\n          }\n          return {\n            quizId: quiz.quizId,\n            quizCategory: quiz.quizCategory,\n            quizTitle: quiz.quizTitle,\n            quizLevel: quiz.quizLevel,\n            nickname: nickname,\n            // 조회한 닉네임을 설정\n            createdAt: createdAt,\n            views: quiz.count || 0\n          };\n        }));\n        this.quizList = quizzesWithNickname;\n      } catch (error) {\n        console.error(\"퀴즈 목록 조회 실패:\", error);\n        alert(\"퀴즈 목록을 불러오는 데 실패했습니다.\");\n      }\n    },\n    goToFirstPage() {\n      this.currentPage = 1;\n    },\n    goToLastPage() {\n      this.currentPage = this.totalPages;\n    },\n    goToPage(pageNum) {\n      this.currentPage = pageNum;\n    },\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      }).replace(/\\. /g, '-').replace('.', '');\n    }\n  },\n  async mounted() {\n    const token = localStorage.getItem(\"jwtToken\");\n    if (!token) {\n      console.error(\"로그인이 필요합니다.\");\n      this.$router.push(\"/login\");\n      return;\n    }\n    await this.fetchQuizList();\n  }\n};","map":{"version":3,"names":["AppHeader","AppFooter","axios","name","components","data","quizList","currentPage","itemsPerPage","computed","totalPages","Math","ceil","length","paginatedQuizList","reversedQuizList","reverse","start","end","slice","methods","nextPage","prevPage","fetchQuizList","token","localStorage","getItem","console","error","beUrl","process","env","VUE_APP_BE_API_URL","response","get","headers","Authorization","quizzesWithNickname","Promise","all","map","quiz","createdAt","date","Date","toISOString","nickname","memberId","nicknameResponse","quizId","quizCategory","quizTitle","quizLevel","views","count","alert","goToFirstPage","goToLastPage","goToPage","pageNum","formatDate","dateString","toLocaleDateString","year","month","day","replace","mounted","$router","push"],"sources":["/home/runner/work/FE/FE/src/components/HomePage.vue"],"sourcesContent":["<template>\n  <div class=\"home-page\">\n    <AppHeader />\n    <div class=\"content\">\n      <div class=\"quiz-board\">\n        <h2>퀴즈 게시판</h2>\n        <div class=\"total-count\">전체 {{ quizList.length }}건</div>\n        <div class=\"table-container\">\n          <table class=\"quiz-table\">\n            <thead>\n              <tr>\n                <th width=\"10%\">번호</th>\n                <th width=\"50%\">제목</th>\n                <th width=\"20%\">작성자</th>\n                <th width=\"20%\">작성일</th>\n              </tr>\n            </thead>\n            <tbody>\n              <template v-for=\"i in itemsPerPage\" :key=\"i\">\n                <tr v-if=\"paginatedQuizList[i-1]\">\n                  <td class=\"id-cell\">{{ paginatedQuizList[i-1].quizId }}</td>\n                  <td class=\"title-cell\">\n                    <div class=\"title-wrapper\">\n                      <span class=\"title-text\">{{ paginatedQuizList[i-1].quizTitle }}</span>\n                      <span class=\"badges\">\n                        <span class=\"category-badge\">{{ paginatedQuizList[i-1].quizCategory }}</span>\n                        <span class=\"level-badge\">{{ paginatedQuizList[i-1].quizLevel }}</span>\n                      </span>\n                    </div>\n                  </td>\n                  <td class=\"author-cell\">{{ paginatedQuizList[i-1].nickname }}</td>\n                  <td class=\"date-cell\">{{ formatDate(paginatedQuizList[i-1].createdAt) }}</td>\n                </tr>\n                <tr v-else class=\"empty-row\">\n                  <td colspan=\"4\">&nbsp;</td>\n                </tr>\n              </template>\n            </tbody>\n          </table>\n        </div>\n        \n        <div class=\"pagination-container\">\n          <div class=\"pagination\">\n            <button class=\"page-btn\" @click=\"goToFirstPage\">≪</button>\n            <button class=\"page-btn\" @click=\"prevPage\" :disabled=\"currentPage === 1\">＜</button>\n            <div class=\"page-numbers\">\n              <button \n                v-for=\"pageNum in displayedPages\" \n                :key=\"pageNum\"\n                :class=\"['page-num', { active: currentPage === pageNum }]\"\n                @click=\"goToPage(pageNum)\"\n              >\n                {{ pageNum }}\n              </button>\n            </div>\n            <button class=\"page-btn\" @click=\"nextPage\" :disabled=\"currentPage === totalPages\">＞</button>\n            <button class=\"page-btn\" @click=\"goToLastPage\">≫</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <AppFooter />\n  </div>\n</template>\n\n<script>\nimport AppHeader from \"./Header.vue\";\nimport AppFooter from \"./Footer.vue\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"HomePage\",\n  components: {\n    AppHeader,\n    AppFooter,\n  },\n  data() {\n    return {\n      quizList: [],\n      currentPage: 1,\n      itemsPerPage: 10,\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.quizList.length / this.itemsPerPage);\n    },\n    paginatedQuizList() {\n      const reversedQuizList = [...this.quizList].reverse();\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return reversedQuizList.slice(start, end);\n    },\n  },\n  methods: {\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    async fetchQuizList() {\n      const token = localStorage.getItem(\"jwtToken\");\n      if (!token) {\n        console.error(\"Token is missing\");\n        return;\n      }\n\n      try {\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        const response = await axios.get(beUrl + \"/api/v1/quizs/all\", {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        // 각 퀴즈에 대해 `memberId`를 이용해 `memberNickname` 가져오기\n        const quizzesWithNickname = await Promise.all(\n          response.data.map(async (quiz) => {\n            const createdAt = quiz.date || new Date().toISOString();\n\n            // `memberId`가 있을 경우 닉네임 조회\n            let nickname = '알 수 없음';\n            if (quiz.memberId) {\n              try {\n                const nicknameResponse = await axios.get(\n                  `${beUrl}/api/v1/members/${quiz.memberId}/nickname`,\n                  {\n                    headers: {\n                      Authorization: `Bearer ${token}`,\n                    },\n                  }\n                );\n                nickname = nicknameResponse.data || '알 수 없음';\n              } catch (error) {\n                console.error(\"닉네임 조회 실패:\", error);\n              }\n            }\n\n            return {\n              quizId: quiz.quizId,\n              quizCategory: quiz.quizCategory,\n              quizTitle: quiz.quizTitle,\n              quizLevel: quiz.quizLevel,\n              nickname: nickname, // 조회한 닉네임을 설정\n              createdAt: createdAt,\n              views: quiz.count || 0\n            };\n          })\n        );\n\n        this.quizList = quizzesWithNickname;\n      } catch (error) {\n        console.error(\"퀴즈 목록 조회 실패:\", error);\n        alert(\"퀴즈 목록을 불러오는 데 실패했습니다.\");\n      }\n    },\n    goToFirstPage() {\n      this.currentPage = 1;\n    },\n    goToLastPage() {\n      this.currentPage = this.totalPages;\n    },\n    goToPage(pageNum) {\n      this.currentPage = pageNum;\n    },\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      }).replace(/\\. /g, '-').replace('.', '');\n    },\n  },\n  async mounted() {\n    const token = localStorage.getItem(\"jwtToken\");\n\n    if (!token) {\n      console.error(\"로그인이 필요합니다.\");\n      this.$router.push(\"/login\");\n      return;\n    }\n\n    await this.fetchQuizList();\n  },\n};\n</script>\n\n<style scoped>\n.home-page {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n}\n\n.content {\n  flex: 1;\n  padding: 20px;\n  max-width: 1200px;\n  margin: 0 auto;\n  min-height: calc(100vh - 200px);\n}\n\n.quiz-board {\n  margin-top: 50px;\n}\n\n.create-quiz-button {\n  margin-bottom: 20px;\n}\n\n.pagination-container {\n  position: sticky;\n  bottom: 0;\n  background-color: white;\n  padding: 20px 0;\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n}\n\n.pagination {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5px;\n}\n\n.page-btn,\n.page-num {\n  min-width: 32px;\n  height: 32px;\n  padding: 0 6px;\n  border: 1px solid #ddd;\n  background-color: white;\n  color: #333;\n  font-size: 14px;\n  line-height: 30px;\n  text-align: center;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.page-btn:hover,\n.page-num:hover {\n  background-color: #f8f9fa;\n  border-color: #999;\n}\n\n.page-num.active {\n  background-color: #007bff;\n  color: white;\n  border-color: #007bff;\n}\n\n.quiz-table {\n  width: 100%;\n  border-collapse: collapse;\n  border-top: 2px solid #333;\n  table-layout: fixed;\n}\n\n.quiz-table th,\n.quiz-table td {\n  padding: 15px;\n  border-bottom: 1px solid #ddd;\n  height: 57px;\n  box-sizing: border-box;\n}\n\n.empty-row td {\n  border-bottom: 1px solid #ddd;\n  height: 57px;\n}\n\n.quiz-table th {\n  background-color: #f8f9fa;\n  font-weight: bold;\n  color: #333;\n  text-align: center;\n}\n\n.quiz-table td.title {\n  text-align: left;\n  width: 50%;\n}\n\n.quiz-table tr:hover {\n  background-color: #f8f9fa;\n}\n\n.category-badge,\n.level-badge {\n  display: inline-block;\n  padding: 2px 8px;\n  border-radius: 12px;\n  font-size: 12px;\n  white-space: nowrap;\n}\n\n.category-badge {\n  background-color: #e9ecef;\n}\n\n.level-badge {\n  background-color: #dee2e6;\n}\n\n.quiz-board {\n  max-width: 1200px;\n  margin-top: 100px;\n  padding: 0 20px;\n  height: 700px;\n  overflow-y: hidden;\n}\n\n.quiz-board h2 {\n  margin-bottom: 20px;\n  font-size: 24px;\n  color: #333;\n}\n\n/* 각 셀 정렬 스타일 */\n.id-cell {\n  text-align: center;\n}\n\n.title-cell {\n  text-align: left;\n  padding-left: 20px;\n}\n\n.title-wrapper {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  width: 100%;\n}\n\n.title-text {\n  flex: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-right: 10px;\n}\n\n.badges {\n  display: flex;\n  gap: 5px;\n  flex-shrink: 0;\n}\n\n.author-cell {\n  text-align: center;\n}\n\n.date-cell {\n  text-align: center;\n}\n\n.total-count {\n  color: #666;\n  font-size: 14px;\n  margin-bottom: 10px;\n}\n\n.table-container {\n  height: 570px;\n  margin: 20px 0;\n  overflow: hidden;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}