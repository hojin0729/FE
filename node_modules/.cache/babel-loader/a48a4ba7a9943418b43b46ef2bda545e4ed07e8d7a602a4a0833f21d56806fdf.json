{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nexport default {\n  name: \"LoginForm\",\n  data() {\n    return {\n      loginData: {\n        memberEmail: \"\",\n        memberPassword: \"\"\n      }\n    };\n  },\n  methods: {\n    async submitLogin() {\n      try {\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        const response = await axios.post(beUrl + \"/api/v1/members/login\", this.loginData, {\n          withCredentials: true\n        });\n        console.log(\"Full response:\", response.data);\n        const fullToken = response.data;\n        const token = fullToken.startsWith(\"Bearer \") ? fullToken.slice(7) : fullToken;\n        if (!token) {\n          throw new Error(\"No token found in response\");\n        }\n\n        // JWT 디코딩\n        const decodedToken = jwtDecode(token);\n        const memberId = decodedToken.memberId;\n        const memberNickname = decodedToken.memberNickname;\n        if (!memberId || !memberNickname) {\n          throw new Error(\"Required information not found in token\");\n        }\n\n        // localStorage에 저장\n        localStorage.setItem(\"jwtToken\", token);\n        localStorage.setItem(\"memberId\", memberId);\n        localStorage.setItem(\"memberNickname\", memberNickname);\n        this.$router.push(\"/\");\n      } catch (error) {\n        console.error(\"Login failed:\", error);\n        alert(\"로그인에 실패했습니다. 이메일과 비밀번호를 확인하세요.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","jwtDecode","name","data","loginData","memberEmail","memberPassword","methods","submitLogin","beUrl","process","env","VUE_APP_BE_API_URL","response","post","withCredentials","console","log","fullToken","token","startsWith","slice","Error","decodedToken","memberId","memberNickname","localStorage","setItem","$router","push","error","alert"],"sources":["/home/runner/work/FE/FE/src/components/Login.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <AppHeader />\n    <div class=\"login-form\">\n      <div class=\"login-content\">\n        <div class=\"logo-area\">\n          <img src=\"@/assets/image.png\" alt=\"DGU\" class=\"logo-image\" width=\"100\" height=\"100\">\n        </div>\n        <div class=\"login-inputs\">\n          <div class=\"input-row\">\n            <input type=\"email\" \n                   id=\"email\" \n                   v-model=\"loginData.memberEmail\" \n                   placeholder=\"이메일\"\n                   required />\n          </div>\n          <div class=\"input-row\">\n            <input type=\"password\" \n                   id=\"password\" \n                   v-model=\"loginData.memberPassword\" \n                   placeholder=\"비밀번호\"\n                   required />\n          </div>\n          <div class=\"login-button-area\">\n            <button @click=\"submitLogin\">로그인</button>\n          </div>\n          <div class=\"login-help\">\n            <div class=\"right-links\">\n              <a href=\"#\">비밀번호 찾기</a>\n              <span class=\"divider\">|</span>\n              <a href=\"#\">아이디 찾기</a>\n              <span class=\"divider\">|</span>\n              <router-link to=\"/signup\">회원가입</router-link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <AppFooter />\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\n\nexport default {\n  name: \"LoginForm\",\n  \n  data() {\n    return {\n      loginData: {\n        memberEmail: \"\",\n        memberPassword: \"\"\n      }\n    };\n  },\n  methods: {\n    async submitLogin() {\n      try {\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        const response = await axios.post(beUrl + \"/api/v1/members/login\", this.loginData,\n        { withCredentials: true }\n        );\n        \n        console.log(\"Full response:\", response.data);\n\n        const fullToken = response.data;\n        const token = fullToken.startsWith(\"Bearer \") ? fullToken.slice(7) : fullToken;\n\n        if (!token) {\n          throw new Error(\"No token found in response\");\n        }\n\n        // JWT 디코딩\n        const decodedToken = jwtDecode(token);\n        const memberId = decodedToken.memberId;\n        const memberNickname = decodedToken.memberNickname;\n\n        if (!memberId || !memberNickname) {\n          throw new Error(\"Required information not found in token\");\n        }\n\n        // localStorage에 저장\n        localStorage.setItem(\"jwtToken\", token);\n        localStorage.setItem(\"memberId\", memberId);\n        localStorage.setItem(\"memberNickname\", memberNickname);\n\n        this.$router.push(\"/\");\n      } catch (error) {\n        console.error(\"Login failed:\", error);\n        alert(\"로그인에 실패했습니다. 이메일과 비밀번호를 확인하세요.\");\n      }\n    }\n  }\n};\n\n  </script>\n  \n  <style scoped>\n\n\nhtml, body {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  overflow: hidden; /* 스크롤 제거 */\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.container {\n  width: 100vw; /* 화면 너비 전체 */\n  height: 100vh; /* 화면 높이 전체 */\n  background-color: #f5f6f7;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.login-content {\n  width: 450px; /* 가로 크기 고정 */\n  height: 450px; /* 세로 크기 고정 */\n  background-color: white;\n  padding: 40px;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);\n}\n\n.logo-area {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n.input-row {\n  position: relative;\n  margin-bottom: 10px;\n}\n\n.input-row input {\n  width: 100%;\n  height: 48px;\n  padding: 0 15px;\n  border: 1px solid #dadada;\n  border-radius: 6px;\n  font-size: 15px;\n  box-sizing: border-box;\n}\n\n.input-row input:focus {\n  outline: none;\n  border-color: rgba(0, 0, 0, 0.865);\n}\n\n.login-button-area {\n  margin-top: 20px;\n}\n\n.login-button-area button {\n  width: 100%;\n  height: 50px;\n  background-color: rgba(0, 0, 0, 0.865);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-size: 16px;\n  font-weight: 700;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.login-button-area button:hover {\n  background-color: #020906b3;\n}\n\n.login-help {\n  margin-top: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 14px;\n}\n\n.right-links {\n  display: flex;\n  align-items: center;\n\n}\n\n.right-links a {\n  color: #888;\n  text-decoration: none;\n  font-size: 13px;\n}\n\n.right-links a:hover {\n  text-decoration: underline;\n  color: rgba(0, 0, 0, 0.865);\n}\n\n.divider {\n  margin: 0 10px;\n  color: #dadada;\n}\n\n/* 반응형 디자인 */\n@media (max-width: 768px) {\n  .login-form {\n    padding: 20px;\n  }\n\n  .login-content {\n    padding: 20px;\n  }\n\n  .login-help {\n    flex-direction: column;\n    gap: 10px;\n  }\n\n  .right-links {\n    width: 100%;\n    justify-content: center;\n  }\n}\n\n  </style>\n  "],"mappings":";AA2CA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,SAAQ,QAAS,YAAY;AAEtC,eAAe;EACbC,IAAI,EAAE,WAAW;EAEjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE;QACTC,WAAW,EAAE,EAAE;QACfC,cAAc,EAAE;MAClB;IACF,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,KAAI,GAAIC,OAAO,CAACC,GAAG,CAACC,kBAAkB;QAC5C,MAAMC,QAAO,GAAI,MAAMb,KAAK,CAACc,IAAI,CAACL,KAAI,GAAI,uBAAuB,EAAE,IAAI,CAACL,SAAS,EACjF;UAAEW,eAAe,EAAE;QAAK,CACxB,CAAC;QAEDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,QAAQ,CAACV,IAAI,CAAC;QAE5C,MAAMe,SAAQ,GAAIL,QAAQ,CAACV,IAAI;QAC/B,MAAMgB,KAAI,GAAID,SAAS,CAACE,UAAU,CAAC,SAAS,IAAIF,SAAS,CAACG,KAAK,CAAC,CAAC,IAAIH,SAAS;QAE9E,IAAI,CAACC,KAAK,EAAE;UACV,MAAM,IAAIG,KAAK,CAAC,4BAA4B,CAAC;QAC/C;;QAEA;QACA,MAAMC,YAAW,GAAItB,SAAS,CAACkB,KAAK,CAAC;QACrC,MAAMK,QAAO,GAAID,YAAY,CAACC,QAAQ;QACtC,MAAMC,cAAa,GAAIF,YAAY,CAACE,cAAc;QAElD,IAAI,CAACD,QAAO,IAAK,CAACC,cAAc,EAAE;UAChC,MAAM,IAAIH,KAAK,CAAC,yCAAyC,CAAC;QAC5D;;QAEA;QACAI,YAAY,CAACC,OAAO,CAAC,UAAU,EAAER,KAAK,CAAC;QACvCO,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEH,QAAQ,CAAC;QAC1CE,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEF,cAAc,CAAC;QAEtD,IAAI,CAACG,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;MACxB,EAAE,OAAOC,KAAK,EAAE;QACdd,OAAO,CAACc,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QACrCC,KAAK,CAAC,gCAAgC,CAAC;MACzC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}