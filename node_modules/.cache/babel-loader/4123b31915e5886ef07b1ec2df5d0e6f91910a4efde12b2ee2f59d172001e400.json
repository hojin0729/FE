{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AppHeader from \"./Header.vue\";\nimport AppFooter from \"./Footer.vue\";\nimport axios from \"axios\";\nexport default {\n  name: \"ArticleDetail\",\n  components: {\n    AppHeader,\n    AppFooter\n  },\n  data() {\n    return {\n      article: {\n        articleId: null,\n        memberNickname: '',\n        articleTitle: '',\n        articleContents: '',\n        createdAt: null\n      },\n      isAuthor: false,\n      newComment: \"\",\n      currentUserNickname: '',\n      comments: []\n    };\n  },\n  methods: {\n    async fetchArticle() {\n      try {\n        const token = localStorage.getItem(\"jwtToken\");\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        const articleId = this.$route.params.id;\n        const response = await axios.get(`${beUrl}/api/v1/articles/${articleId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          withCredentials: true\n        });\n        this.article = response.data;\n        // 작성자 본인인지 확인하는 로직 추가 필요\n      } catch (error) {\n        console.error(\"Failed to fetch article:\", error);\n        alert(\"게시글을 불러오는데 실패했습니다.\");\n      }\n    },\n    formatDate(dateArray) {\n      if (!dateArray || !Array.isArray(dateArray)) return '';\n      try {\n        const year = dateArray[0];\n        const month = String(dateArray[1]).padStart(2, '0');\n        const day = String(dateArray[2]).padStart(2, '0');\n        const hours = String(dateArray[3]).padStart(2, '0');\n        const minutes = String(dateArray[4]).padStart(2, '0');\n        return `${year}-${month}-${day} ${hours}:${minutes}`;\n      } catch (error) {\n        console.error('Date formatting error:', error);\n        return '';\n      }\n    },\n    goToList() {\n      this.$router.push('/articles');\n    },\n    editArticle() {\n      this.$router.push(`/articles/${this.article.articleId}/edit`);\n    },\n    async deleteArticle() {\n      if (!confirm('정말로 삭제하시겠습니까?')) return;\n      try {\n        const token = localStorage.getItem(\"jwtToken\");\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        await axios.delete(`${beUrl}/api/v1/articles/${this.article.articleId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          withCredentials: true\n        });\n        alert('게시글이 삭제되었습니다.');\n        this.$router.push('/articles');\n      } catch (error) {\n        console.error(\"Failed to delete article:\", error);\n        alert(\"게시글 삭제에 실패했습니다.\");\n      }\n    },\n    isCurrentUserComment(commentNickname) {\n      return this.currentUserNickname === commentNickname;\n    },\n    async submitComment() {\n      if (!this.newComment.trim()) {\n        alert(\"댓글 내용을 입력해주세요.\");\n        return;\n      }\n      const token = localStorage.getItem(\"jwtToken\");\n      if (!token) {\n        alert(\"로그인이 필요합니다.\");\n        this.$router.push(\"/login\");\n        return;\n      }\n      try {\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        const articleId = this.$route.params.id;\n\n        // ArticleCommentRequestDto 형식에 맞춰 데이터 전송\n        const commentData = {\n          articleId: parseInt(articleId),\n          articleCommentContent: this.newComment,\n          articleCommentCreatedAt: new Date().toISOString()\n        };\n        await axios.post(`${beUrl}/api/v1/article-comments`, commentData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // 댓글 작성 성공 후 댓글 목록 새로고침\n        this.newComment = \"\";\n        await this.fetchComments();\n      } catch (error) {\n        console.error(\"댓글 작성 실패:\", error);\n        alert(\"댓글 작성에 실패했습니다.\");\n      }\n    },\n    startEditing(comment) {\n      comment.isEditing = true;\n      comment.editContent = comment.articleCommentContent;\n    },\n    async saveEdit(comment) {\n      if (!comment.editContent.trim()) {\n        alert(\"댓글 내용을 력해주세요.\");\n        return;\n      }\n      const token = localStorage.getItem(\"jwtToken\");\n      if (!token) return;\n      try {\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        await axios.patch(`${beUrl}/api/v1/article-comments/${comment.articleCommentId}`, {\n          articleCommentContent: comment.editContent\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        comment.isEditing = false;\n        await this.fetchComments();\n      } catch (error) {\n        console.error(\"댓글 수정 실패:\", error);\n        alert(\"댓글 수정에 실패했습니다.\");\n      }\n    },\n    cancelEdit(comment) {\n      comment.isEditing = false;\n      comment.editContent = comment.articleCommentContent;\n    },\n    async deleteComment(commentId) {\n      if (!confirm(\"댓글을 삭제하시겠습니까?\")) return;\n      const token = localStorage.getItem(\"jwtToken\");\n      if (!token) return;\n      try {\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        await axios.delete(`${beUrl}/api/v1/article-comments/${commentId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        await this.fetchComments();\n      } catch (error) {\n        console.error(\"댓글 삭제 실패:\", error);\n        alert(\"댓글 삭제에 실패했습니다.\");\n      }\n    },\n    async fetchComments() {\n      try {\n        const token = localStorage.getItem(\"jwtToken\");\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        const articleId = this.$route.params.id;\n        const response = await axios.get(`${beUrl}/api/v1/article-comments`, {\n          params: {\n            articleId\n          },\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.comments = response.data.map(comment => ({\n          ...comment,\n          isEditing: false,\n          editContent: comment.articleCommentContent\n        }));\n      } catch (error) {\n        console.error(\"댓글 조회 실패:\", error);\n      }\n    }\n  },\n  async mounted() {\n    this.currentUserNickname = localStorage.getItem(\"memberNickname\");\n    await this.fetchArticle();\n    await this.fetchComments();\n  }\n};","map":{"version":3,"names":["AppHeader","AppFooter","axios","name","components","data","article","articleId","memberNickname","articleTitle","articleContents","createdAt","isAuthor","newComment","currentUserNickname","comments","methods","fetchArticle","token","localStorage","getItem","beUrl","process","env","VUE_APP_BE_API_URL","$route","params","id","response","get","headers","Authorization","withCredentials","error","console","alert","formatDate","dateArray","Array","isArray","year","month","String","padStart","day","hours","minutes","goToList","$router","push","editArticle","deleteArticle","confirm","delete","isCurrentUserComment","commentNickname","submitComment","trim","commentData","parseInt","articleCommentContent","articleCommentCreatedAt","Date","toISOString","post","fetchComments","startEditing","comment","isEditing","editContent","saveEdit","patch","articleCommentId","cancelEdit","deleteComment","commentId","map","mounted"],"sources":["/home/runner/work/FE/FE/src/components/ArticleDetail.vue"],"sourcesContent":["<template>\n  <div class=\"article-detail-page\">\n    <AppHeader />\n    <div class=\"content\">\n      <div class=\"article-container\">\n        <div class=\"article-header\">\n          <h1 class=\"article-title\">{{ \"제목 : \" + article.articleTitle }}</h1>\n          <div class=\"article-info\">\n            <span class=\"author\">작성자: {{ article.memberNickname }}</span>\n            <span class=\"date\">작성일: {{ formatDate(article.createdAt) }}</span>\n          </div>\n        </div>\n        <div class=\"article-content\">\n          {{ article.articleContents }}\n        </div>\n        <div class=\"comments-section\">\n          <h3>댓글</h3>\n          <div class=\"comment-form\">\n            <textarea \n              v-model=\"newComment\" \n              placeholder=\"댓글을 작성해주세요\"\n              rows=\"3\"\n              maxlength=\"500\"\n            ></textarea>\n            <div class=\"comment-form-footer\">\n              <span class=\"char-count\">{{ newComment.length }}/500자</span>\n              <button @click=\"submitComment\" class=\"comment-submit\">댓글 작성</button>\n            </div>\n          </div>\n          \n          <div class=\"comments-list\">\n            <div v-for=\"comment in comments\" :key=\"comment.articleCommentId\" class=\"comment\">\n              <div class=\"comment-header\">\n                <div class=\"comment-left\">\n                  <span class=\"comment-author\">작성자: {{ comment.memberNickname }}</span>\n                </div>\n                <div class=\"comment-right\">\n                  <span class=\"comment-date\">\n                    {{ formatDate(comment.articleCommentCreatedAt) }}\n                    <span v-if=\"comment.articleCommentUpdatedAt\" class=\"edited-mark\">(수정됨)</span>\n                  </span>\n                  <div class=\"comment-actions\" v-if=\"isCurrentUserComment(comment.memberNickname)\">\n                    <button \n                      v-if=\"!comment.isEditing\" \n                      @click=\"startEditing(comment)\" \n                      class=\"edit-btn\"\n                    >\n                      수정\n                    </button>\n                    <button \n                      @click=\"deleteComment(comment.articleCommentId)\" \n                      class=\"delete-btn\"\n                    >\n                      삭제\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div v-if=\"comment.isEditing\" class=\"edit-form\">\n                <textarea \n                  v-model=\"comment.editContent\" \n                  rows=\"3\"\n                  maxlength=\"500\"\n                ></textarea>\n                <div class=\"edit-form-footer\">\n                  <span class=\"char-count\">{{ comment.editContent.length }}/500자</span>\n                  <div class=\"edit-buttons\">\n                    <button @click=\"saveEdit(comment)\" class=\"save-btn\">저장</button>\n                    <button @click=\"cancelEdit(comment)\" class=\"cancel-btn\">취소</button>\n                  </div>\n                </div>\n              </div>\n              <p v-else class=\"comment-content\">{{ comment.articleCommentContent }}</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"button-group\">\n          <button class=\"list-button\" @click=\"goToList\">목록</button>\n          <div v-if=\"isAuthor\" class=\"author-buttons\">\n            <button class=\"edit-button\" @click=\"editArticle\">수정</button>\n            <button class=\"delete-button\" @click=\"deleteArticle\">삭제</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <AppFooter />\n  </div>\n</template>\n\n<script>\nimport AppHeader from \"./Header.vue\";\nimport AppFooter from \"./Footer.vue\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"ArticleDetail\",\n  components: {\n    AppHeader,\n    AppFooter,\n  },\n  data() {\n    return {\n      article: {\n        articleId: null,\n        memberNickname: '',\n        articleTitle: '',\n        articleContents: '',\n        createdAt: null\n      },\n      isAuthor: false,\n      newComment: \"\",\n      currentUserNickname: '',\n      comments: []\n    };\n  },\n  methods: {\n    async fetchArticle() {\n      try {\n        const token = localStorage.getItem(\"jwtToken\");\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        const articleId = this.$route.params.id;\n        \n        const response = await axios.get(`${beUrl}/api/v1/articles/${articleId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          withCredentials: true\n        });\n        \n        this.article = response.data;\n        // 작성자 본인인지 확인하는 로직 추가 필요\n      } catch (error) {\n        console.error(\"Failed to fetch article:\", error);\n        alert(\"게시글을 불러오는데 실패했습니다.\");\n      }\n    },\n    formatDate(dateArray) {\n      if (!dateArray || !Array.isArray(dateArray)) return '';\n      \n      try {\n        const year = dateArray[0];\n        const month = String(dateArray[1]).padStart(2, '0');\n        const day = String(dateArray[2]).padStart(2, '0');\n        const hours = String(dateArray[3]).padStart(2, '0');\n        const minutes = String(dateArray[4]).padStart(2, '0');\n        \n        return `${year}-${month}-${day} ${hours}:${minutes}`;\n      } catch (error) {\n        console.error('Date formatting error:', error);\n        return '';\n      }\n    },\n    goToList() {\n      this.$router.push('/articles');\n    },\n    editArticle() {\n      this.$router.push(`/articles/${this.article.articleId}/edit`);\n    },\n    async deleteArticle() {\n      if (!confirm('정말로 삭제하시겠습니까?')) return;\n\n      try {\n        const token = localStorage.getItem(\"jwtToken\");\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        \n        await axios.delete(`${beUrl}/api/v1/articles/${this.article.articleId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          withCredentials: true\n        });\n        \n        alert('게시글이 삭제되었습니다.');\n        this.$router.push('/articles');\n      } catch (error) {\n        console.error(\"Failed to delete article:\", error);\n        alert(\"게시글 삭제에 실패했습니다.\");\n      }\n    },\n    isCurrentUserComment(commentNickname) {\n      return this.currentUserNickname === commentNickname;\n    },\n    async submitComment() {\n      if (!this.newComment.trim()) {\n        alert(\"댓글 내용을 입력해주세요.\");\n        return;\n      }\n\n      const token = localStorage.getItem(\"jwtToken\");\n      if (!token) {\n        alert(\"로그인이 필요합니다.\");\n        this.$router.push(\"/login\");\n        return;\n      }\n\n      try {\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        const articleId = this.$route.params.id;\n        \n        // ArticleCommentRequestDto 형식에 맞춰 데이터 전송\n        const commentData = {\n          articleId: parseInt(articleId),\n          articleCommentContent: this.newComment,\n          articleCommentCreatedAt: new Date().toISOString()\n        };\n\n        await axios.post(\n          `${beUrl}/api/v1/article-comments`,\n          commentData,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          }\n        );\n\n        // 댓글 작성 성공 후 댓글 목록 새로고침\n        this.newComment = \"\";\n        await this.fetchComments();\n      } catch (error) {\n        console.error(\"댓글 작성 실패:\", error);\n        alert(\"댓글 작성에 실패했습니다.\");\n      }\n    },\n    startEditing(comment) {\n      comment.isEditing = true;\n      comment.editContent = comment.articleCommentContent;\n    },\n    async saveEdit(comment) {\n      if (!comment.editContent.trim()) {\n        alert(\"댓글 내용을 력해주세요.\");\n        return;\n      }\n\n      const token = localStorage.getItem(\"jwtToken\");\n      if (!token) return;\n\n      try {\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        \n        await axios.patch(\n          `${beUrl}/api/v1/article-comments/${comment.articleCommentId}`,\n          {\n            articleCommentContent: comment.editContent\n          },\n          { headers: { Authorization: `Bearer ${token}` }}\n        );\n\n        comment.isEditing = false;\n        await this.fetchComments();\n      } catch (error) {\n        console.error(\"댓글 수정 실패:\", error);\n        alert(\"댓글 수정에 실패했습니다.\");\n      }\n    },\n    cancelEdit(comment) {\n      comment.isEditing = false;\n      comment.editContent = comment.articleCommentContent;\n    },\n    async deleteComment(commentId) {\n      if (!confirm(\"댓글을 삭제하시겠습니까?\")) return;\n\n      const token = localStorage.getItem(\"jwtToken\");\n      if (!token) return;\n\n      try {\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        \n        await axios.delete(`${beUrl}/api/v1/article-comments/${commentId}`, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n\n        await this.fetchComments();\n      } catch (error) {\n        console.error(\"댓글 삭제 실패:\", error);\n        alert(\"댓글 삭제에 실패했습니다.\");\n      }\n    },\n    async fetchComments() {\n      try {\n        const token = localStorage.getItem(\"jwtToken\");\n        const beUrl = process.env.VUE_APP_BE_API_URL;\n        const articleId = this.$route.params.id;\n        \n        const response = await axios.get(`${beUrl}/api/v1/article-comments`, {\n          params: { articleId },\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        \n        this.comments = response.data.map(comment => ({\n          ...comment,\n          isEditing: false,\n          editContent: comment.articleCommentContent\n        }));\n      } catch (error) {\n        console.error(\"댓글 조회 실패:\", error);\n      }\n    }\n  },\n  async mounted() {\n    this.currentUserNickname = localStorage.getItem(\"memberNickname\");\n    await this.fetchArticle();\n    await this.fetchComments();\n  }\n};\n</script>\n\n<style scoped>\n.article-detail-page {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.content {\n  flex: 1;\n  padding: 20px;\n  max-width: 1200px;\n  margin: 0 auto;\n  width: 100%;\n  padding-top: 80px;\n}\n\n.article-container {\n  background-color: white;\n  border-radius: 8px;\n  padding: 30px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.article-header {\n  border-bottom: 2px solid #333;\n  padding-bottom: 20px;\n  margin-bottom: 20px;\n}\n\n.article-title {\n  font-size: 24px;\n  margin-bottom: 15px;\n}\n\n.article-info {\n  display: flex;\n  justify-content: space-between;\n  color: #666;\n  font-size: 14px;\n}\n\n.article-content {\n  min-height: 300px;\n  line-height: 1.6;\n  white-space: pre-wrap;\n  padding: 20px 0;\n}\n\n.button-group {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 30px;\n  padding-top: 20px;\n  border-top: 1px solid #ddd;\n}\n\n.author-buttons {\n  display: flex;\n  gap: 10px;\n}\n\n.list-button,\n.edit-button,\n.delete-button {\n  padding: 8px 20px;\n  border-radius: 4px;\n  font-size: 14px;\n  cursor: pointer;\n  border: none;\n}\n\n.list-button {\n  background-color: #f8f9fa;\n  border: 1px solid #ddd;\n}\n\n.edit-button {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.delete-button {\n  background-color: #f44336;\n  color: white;\n}\n\nbutton:hover {\n  opacity: 0.9;\n}\n\n.comments-section {\n  margin-top: 40px;\n  border-top: 1px solid #ddd;\n  padding-top: 20px;\n}\n\n.comments-section h3 {\n  font-size: 18px;\n  margin-bottom: 20px;\n  color: #333;\n}\n\n.comment-form textarea {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  resize: vertical;\n  margin-bottom: 10px;\n}\n\n.comment-form-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.comment-submit {\n  background-color: #4CAF50;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.comment-submit:hover {\n  opacity: 0.9;\n}\n\n.comments-list {\n  margin-top: 20px;\n}\n\n.comment {\n  margin-bottom: 20px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.comment-left {\n  display: flex;\n  align-items: center;\n}\n\n.comment-right {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n.comment-author {\n  margin-right: 10px;\n}\n\n.comment-date {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.comment-actions {\n  display: flex;\n  gap: 10px;\n}\n\n.edit-btn, .delete-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 12px;\n  padding: 4px 8px;\n  margin-left: 8px;\n}\n\n.edit-btn {\n  color: #666;\n}\n\n.delete-btn {\n  color: #dc3545;\n}\n\n.edit-btn:hover, .delete-btn:hover {\n  text-decoration: underline;\n}\n\n.edit-form {\n  margin-top: 10px;\n}\n\n.edit-form textarea {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  resize: vertical;\n}\n\n.edit-form-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 8px;\n}\n\n.save-btn, .cancel-btn {\n  padding: 4px 12px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 12px;\n}\n\n.save-btn {\n  background-color: rgba(0, 0, 0, 0.865);\n  color: white;\n}\n\n.cancel-btn {\n  background-color: #e9ecef;\n  color: #666;\n}\n\n.save-btn:hover {\n  background-color: #000;\n}\n\n.cancel-btn:hover {\n  background-color: #dee2e6;\n}\n\n.comment-content {\n  margin-top: 10px;\n}\n\n.edited-mark {\n  color: #666;\n  font-size: 12px;\n  margin-left: 4px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}